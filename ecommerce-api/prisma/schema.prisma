// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model 
model User {
  id            Int        @id @default(autoincrement())
  firstName     String     
  lastName      String     
  email         String     @unique
  phone         String?    
  role          UserRole   @default(CLIENT)
  password      String     
  isActive      Boolean    @default(true)
  tokens        Token[]    
  preferredDeliveryType String?
  deliveryAddress       Json?
  preferredStation      Json?
  preferredStore        Json?  
  orders        Order[]    
  cart          Cart?      
  reviews       Review[]
  // Data processing consent fields
  dataConsentAccepted Boolean  @default(false)
  dataConsentDate     DateTime?
  dataConsentVersion  String?
  marketingConsent    Boolean  @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([email])
}

// Modified Order model with new delivery options
model Order {
  id              Int         @id @default(autoincrement())
  userId          Int?
  user            User?        @relation(fields: [userId], references: [id])
   // Guest information
  guestInfo       GuestInfo?  // New relation to guest information
  deliveryType    DeliveryType @default(RAILWAY_STATION)
  // Conditional relations based on delivery type
  addressDelivery AddressDelivery?
  stationDelivery StationDelivery?
  pickupDelivery  PickupDelivery?
  status          OrderStatus @default(PENDING)
  items           OrderItem[]
  totalAmount     Decimal     @db.Decimal(10, 2)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   PaymentMethod?
  discount        Decimal?    @db.Decimal(10, 2)
  trackingNumber  String?
  notesAdmin      String?
  notesClient     String?
  changes              String[]   @default([])
  lastNotificationSent DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([userId])
  @@index([status])
}

// New model for guest information
model GuestInfo {
  id          Int      @id @default(autoincrement())
  orderId     Int      @unique
  order       Order    @relation(fields: [orderId], references: [id])
  firstName   String
  lastName    String
  email       String
  phone       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([email])
}

// New enum for delivery types
enum DeliveryType {
  PICKUP
  ADDRESS
  RAILWAY_STATION
}

// New model for address delivery
model AddressDelivery {
  id          Int      @id @default(autoincrement())
  orderId     Int      @unique
  order       Order    @relation(fields: [orderId], references: [id])
  street      String
  house       String
  apartment   String?
  city        String
  postalCode  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// New model for railway station delivery
model StationDelivery {
  id          Int          @id @default(autoincrement())
  orderId     Int          @unique
  order       Order        @relation(fields: [orderId], references: [id])
  stationId   Int
  station     RailwayStation @relation(fields: [stationId], references: [id])
  meetingTime DateTime
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// New model for pickup delivery
model PickupDelivery {
  id          Int      @id @default(autoincrement())
  orderId     Int      @unique
  order       Order    @relation(fields: [orderId], references: [id])
  storeId     Int
  store       Store    @relation(fields: [storeId], references: [id])
  pickupTime  DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// New model for railway stations
model RailwayStation {
  id            Int               @id @default(autoincrement())
  indexNumber   Int?
  city          String
  name          String
  meetingPoint  String
  photo         String?
  deliveries    StationDelivery[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@unique([city, name])
}

// New model for store locations
model Store {
  id          Int              @id @default(autoincrement())
  name        String
  address     String
  city        String
  postalCode  String
  phone       String?
  workingHours String
  pickups     PickupDelivery[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Token {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique  // Added unique constraint
  type      TokenType // Added token type
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([token])  // Added index for token searches
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
}

enum UserRole {
  ADMIN
  CLIENT
}


// Added OrderItem model
model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  
  @@index([orderId])
  @@index([productId])
}

// Added Product model
model Product {
  id              Int         @id @default(autoincrement())
  name            String      
  description     String      
  descriptionFull String      @map("description_full")
  price          Decimal     @db.Decimal(10, 2)  
  weight         String      
  image          String      // Основное изображение
  images         String[]    // Массив дополнительных изображений
  umovy          String      
  recipe         String      
  assortment     String[]    
  stock          Int         @default(0)  
  categoryId     Int         
  category       Category    @relation(fields: [categoryId], references: [id])
  isActive       Boolean     @default(true)  
  orderItems     OrderItem[]
  cartItems      CartItem[]
  reviews        Review[]
  displayOrder   Int         @default(9999)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  translations   ProductTranslation[]

  @@index([categoryId])
  @@index([name])
}

// Prisma schema extension for product translations
model ProductTranslation {
  id         Int      @id @default(autoincrement())
  productId  Int
  language   String   // 'uk', 'en', 'fr', etc.
  name       String?
  description String?
  descriptionFull String? @db.Text
  weight     String?
  umovy      String?
  recipe     String?  @db.Text
  
  // Define relationships
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Composite unique constraint to ensure one translation per language per product
  @@unique([productId, language])
}

// Added Category model
model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Added Cart model
model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// Added CartItem model
model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int

  @@index([cartId])
  @@index([productId])
}

// Added Review model
model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int      @db.SmallInt
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  TWINT
  CASH
}