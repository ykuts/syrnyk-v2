// frontend/src/components/admin/panels/ReportsPanelComponents/PivotTableContainer.js
import React, { useState, useEffect, useMemo } from 'react';
import { Card, Alert, Button, Row, Col, Modal, Form, ListGroup, Badge, Spinner } from 'react-bootstrap';
import { Download, Settings, BarChart3, Save, TrendingUp, Calendar, Trash2, Star, RotateCcw } from 'lucide-react';
import PivotTableUI from 'react-pivottable/PivotTableUI';
import 'react-pivottable/pivottable.css';
import TableRenderers from 'react-pivottable/TableRenderers';
import Plot from 'react-plotly.js';
import createPlotlyRenderers from 'react-pivottable/PlotlyRenderers';
import './PivotTable.css';
import { apiClient } from '../../../../utils/api';

// Create the renderers including Plotly charts
const PlotlyRenderers = createPlotlyRenderers(Plot);

const PivotTableContainer = ({ data, filters, onFiltersUpdate }) => {
  // ===== STATES =====
  const [savedConfigs, setSavedConfigs] = useState([]);
  const [loading, setLoading] = useState(false);
  const [configLoading, setConfigLoading] = useState(false);
  const [successMessage, setSuccessMessage] = useState('');

  // Modal states
  const [showSaveModal, setShowSaveModal] = useState(false);
  const [showLoadModal, setShowLoadModal] = useState(false);
  const [saveForm, setSaveForm] = useState({
    name: '',
    description: '',
    isDefault: false
  });

  // Initialization flag
  const [isInitialized, setIsInitialized] = useState(false);

  // ===== FIELD TRANSLATIONS =====
  const fieldTranslations = {
    // Order fields
    order_id: 'ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è',
    order_date: '–î–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è',
    order_status: '–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è',
    order_total: '–°—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è',
    delivery_date: '–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏',
    delivery_time_slot: '–ß–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏',
    delivery_cost: '–í–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏',

    // Customer fields
    customer_name: '–Ü–º—è –∫–ª—ñ—î–Ω—Ç–∞',
    customer_type: '–¢–∏–ø –∫–ª—ñ—î–Ω—Ç–∞',
    customer_phone: '–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª—ñ—î–Ω—Ç–∞',
    customer_email: 'Email –∫–ª—ñ—î–Ω—Ç–∞',

    // Delivery fields
    delivery_type: '–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏',
    delivery_location: '–ú—ñ—Å—Ü–µ –¥–æ—Å—Ç–∞–≤–∫–∏',
    delivery_city: '–ú—ñ—Å—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏',
    delivery_canton: '–ö–∞–Ω—Ç–æ–Ω',
    station_name: '–ù–∞–∑–≤–∞ —Å—Ç–∞–Ω—Ü—ñ—ó',

    // Product fields
    product_name: '–ù–∞–∑–≤–∞ –ø—Ä–æ–¥—É–∫—Ç—É',
    product_category: '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –ø—Ä–æ–¥—É–∫—Ç—É',
    product_weight: '–í–∞–≥–∞ –ø—Ä–æ–¥—É–∫—Ç—É',
    quantity: '–ö—ñ–ª—å–∫—ñ—Å—Ç—å',
    unit_price: '–¶—ñ–Ω–∞ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é',
    item_total: '–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ —Ç–æ–≤–∞—Ä—É',

    // Time periods
    order_year: '–†—ñ–∫ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è',
    order_month: '–ú—ñ—Å—è—Ü—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è',
    order_week: '–¢–∏–∂–¥–µ–Ω—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è',
    delivery_year: '–†—ñ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏',
    delivery_month: '–ú—ñ—Å—è—Ü—å –¥–æ—Å—Ç–∞–≤–∫–∏',
    delivery_week: '–¢–∏–∂–¥–µ–Ω—å –¥–æ—Å—Ç–∞–≤–∫–∏',
    order_day_of_week: '–î–µ–Ω—å —Ç–∏–∂–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è',
    delivery_day_of_week: '–î–µ–Ω—å —Ç–∏–∂–Ω—è –¥–æ—Å—Ç–∞–≤–∫–∏',

    // Planning fields
    is_future_delivery: '–ú–∞–π–±—É—Ç–Ω—è –¥–æ—Å—Ç–∞–≤–∫–∞',
    delivery_planning_type: '–¢–∏–ø –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è',
    days_until_delivery: '–î–Ω—ñ–≤ –¥–æ –¥–æ—Å—Ç–∞–≤–∫–∏',
    week_of_year: '–¢–∏–∂–¥–µ–Ω—å —Ä–æ–∫—É'
  };

  // ===== COMPUTED VALUES =====
  // Translate data field names
  const translateData = (originalData) => {
    if (!originalData || originalData.length === 0) return [];

    return originalData.map(row => {
      const translatedRow = {};
      Object.keys(row).forEach(key => {
        const translatedKey = fieldTranslations[key] || key;
        translatedRow[translatedKey] = row[key];
      });
      return translatedRow;
    });
  };

  const translatedData = useMemo(() => translateData(data), [data]);

  // Check data types
  const hasFutureDeliveries = useMemo(() =>
    data.some(row => row.is_future_delivery === true), [data]
  );

  const hasHistoricalData = useMemo(() =>
    data.some(row => row.is_future_delivery === false), [data]
  );

  const hasData = translatedData.length > 0;

  // ===== PIVOT STATE =====
  const [pivotState, setPivotState] = useState({
    data: [],
    aggregatorName: 'Count',
    vals: [],
    rows: ['–ö–∞–Ω—Ç–æ–Ω', '–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏', '–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏', '–ù–∞–∑–≤–∞ —Å—Ç–∞–Ω—Ü—ñ—ó', '–Ü–º—è –∫–ª—ñ—î–Ω—Ç–∞', '–°—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'],
    cols: ['–ù–∞–∑–≤–∞ –ø—Ä–æ–¥—É–∫—Ç—É'],
    rendererName: 'Table Heatmap',
    unusedOrientationCutoff: 85
  });

  // ===== PRESET CONFIGURATIONS =====
  const presetConfigs = {
    basic_report: {
      name: '–ë–∞–∑–æ–≤–∏–π –∑–≤—ñ—Ç',
      description: '–†–æ–∑–ø–æ–¥—ñ–ª –∑–∞–º–æ–≤–ª–µ–Ω—å –∑–∞ –¥–∞—Ç–∞–º–∏ —Ç–∞ –ø—Ä–æ–¥—É–∫—Ü—ñ—î—é',
      config: {
        aggregatorName: 'Count',
        vals: [],
        rows: ['–ö–∞–Ω—Ç–æ–Ω', '–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏', '–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏', '–ù–∞–∑–≤–∞ —Å—Ç–∞–Ω—Ü—ñ—ó', '–Ü–º—è –∫–ª—ñ—î–Ω—Ç–∞', '–°—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'],
        cols: ['–ù–∞–∑–≤–∞ –ø—Ä–æ–¥—É–∫—Ç—É'],
        rendererName: 'Table Heatmap'
      },
      icon: <TrendingUp size={16} />,
      requiresFuture: true
    },
    production_planning: {
      name: '–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞',
      description: '–ê–Ω–∞–ª—ñ–∑ –ø–æ—Ç—Ä–µ–± —É –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤—ñ –∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ —Ç–∞ –¥–∞—Ç–∞–º–∏',
      config: {
        aggregatorName: 'Sum',
        vals: ['–ö—ñ–ª—å–∫—ñ—Å—Ç—å'],
        rows: ['–ù–∞–∑–≤–∞ –ø—Ä–æ–¥—É–∫—Ç—É', '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –ø—Ä–æ–¥—É–∫—Ç—É'],
        cols: ['–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏'],
        rendererName: 'Table'
      },
      icon: <BarChart3 size={16} />
    },
    future_delivery_planning: {
      name: '–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –º–∞–π–±—É—Ç–Ω—ñ—Ö –¥–æ—Å—Ç–∞–≤–æ–∫',
      description: '–†–æ–∑–ø–æ–¥—ñ–ª –º–∞–π–±—É—Ç–Ω—ñ—Ö –¥–æ—Å—Ç–∞–≤–æ–∫ –∑–∞ –¥–∞—Ç–∞–º–∏ —Ç–∞ —Ç–∏–ø–∞–º–∏',
      config: {
        aggregatorName: 'Count',
        vals: [],
        rows: ['–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏', '–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏'],
        cols: ['–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'],
        rendererName: 'Table Heatmap'
      },
      icon: <TrendingUp size={16} />,
      requiresFuture: true
    },
    weekly_production_schedule: {
      name: '–¢–∏–∂–Ω–µ–≤–∏–π –ø–ª–∞–Ω –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞',
      description: '–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞ –ø–æ —Ç–∏–∂–Ω—è—Ö',
      config: {
        aggregatorName: 'Sum',
        vals: ['–ö—ñ–ª—å–∫—ñ—Å—Ç—å'],
        rows: ['–ù–∞–∑–≤–∞ –ø—Ä–æ–¥—É–∫—Ç—É'],
        cols: ['–¢–∏–∂–¥–µ–Ω—å –¥–æ—Å—Ç–∞–≤–∫–∏'],
        rendererName: 'Table'
      },
      icon: <Calendar size={16} />,
      requiresFuture: true
    },
    station_delivery: {
      name: '–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ —Å—Ç–∞–Ω—Ü—ñ—ó',
      description: '–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç–∞–≤–æ–∫ –Ω–∞ –∑–∞–ª—ñ–∑–Ω–∏—á–Ω—ñ —Å—Ç–∞–Ω—Ü—ñ—ó',
      config: {
        aggregatorName: 'Count',
        vals: [],
        rows: ['–ù–∞–∑–≤–∞ —Å—Ç–∞–Ω—Ü—ñ—ó', '–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏'],
        cols: ['–ù–∞–∑–≤–∞ –ø—Ä–æ–¥—É–∫—Ç—É'],
        rendererName: 'Table'
      },
      icon: <Settings size={16} />
    },
    delivery_by_canton: {
      name: '–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –∫–∞–Ω—Ç–æ–Ω–∞—Ö',
      description: '–ê–Ω–∞–ª—ñ–∑ –¥–æ—Å—Ç–∞–≤–æ–∫ –∑–∞ –∫–∞–Ω—Ç–æ–Ω–∞–º–∏ —Ç–∞ –º—ñ—Å—Ç–∞–º–∏',
      config: {
        aggregatorName: 'Count',
        vals: [],
        rows: ['–ö–∞–Ω—Ç–æ–Ω', '–ú—ñ—Å—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏'],
        cols: ['–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏'],
        rendererName: 'Table'
      },
      icon: <Settings size={16} />
    }
  };

  // ===== UTILITY FUNCTIONS =====
  const showSuccessMessage = (message) => {
    setSuccessMessage(message);
    setTimeout(() => setSuccessMessage(''), 3000);
  };

  const forceRefreshPivot = () => {
    const pivotContainer = document.querySelector('.pivot-container');
    if (pivotContainer) {
      pivotContainer.classList.add('pivot-refreshing');
      setTimeout(() => {
        pivotContainer.classList.remove('pivot-refreshing');
      }, 300);
    }

    setPivotState(prev => ({
      ...prev,
      _forceUpdate: Date.now()
    }));
  };

  // ===== PIVOT CONTROL FUNCTIONS =====
  const handlePivotChange = (newState) => {
    console.log('üîÑ Pivot state changing:', {
      oldCols: pivotState.cols,
      newCols: newState.cols,
      oldRows: pivotState.rows,
      newRows: newState.rows
    });

    setPivotState({
      ...newState,
      data: translatedData
    });
  };

  const clearColumns = () => {
    setPivotState(prev => ({ ...prev, cols: [] }));
  };

  const clearRows = () => {
    setPivotState(prev => ({ ...prev, rows: [] }));
  };

  const resetToDefault = () => {
    setPivotState({
      data: translatedData,
      aggregatorName: 'Sum',
      vals: ['–ö—ñ–ª—å–∫—ñ—Å—Ç—å'],
      rows: ['–ù–∞–∑–≤–∞ –ø—Ä–æ–¥—É–∫—Ç—É'],
      cols: [],
      rendererName: 'Table',
      unusedOrientationCutoff: 85
    });
    setIsInitialized(false);
  };

  // ===== API FUNCTIONS =====
  const loadSavedConfigurations = async () => {
    try {
      setLoading(true);
      const response = await apiClient.get('/pivot-configs');
      if (response.success) {
        setSavedConfigs(response.data);
      }
    } catch (error) {
      console.error('Error loading configurations:', error);
    } finally {
      setLoading(false);
    }
  };

  const applyConfigurationToPivot = (config) => {
    try {
      console.log('üéØ Applying configuration to pivot table...');

      const newState = {
        ...config.configuration,
        data: translatedData,
        _forceUpdate: Date.now()
      };

      setPivotState(newState);
      setIsInitialized(true);

      setTimeout(() => forceRefreshPivot(), 100);

      const configDetails = [
        config.configuration.rows?.length ? `–†—è–¥–∫–∏: ${config.configuration.rows.join(', ')}` : '',
        config.configuration.cols?.length ? `–ö–æ–ª–æ–Ω–∫–∏: ${config.configuration.cols.join(', ')}` : '',
        config.configuration.vals?.length ? `–ó–Ω–∞—á–µ–Ω–Ω—è: ${config.configuration.vals.join(', ')}` : '',
        config.configuration.aggregatorName ? `–ê–≥—Ä–µ–≥–∞—Ü—ñ—è: ${config.configuration.aggregatorName}` : ''
      ].filter(Boolean).join('\n');

      showSuccessMessage(`‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è "${config.name}" –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞!\n${configDetails}`);

    } catch (error) {
      console.error('‚ùå Error applying configuration:', error);
      showSuccessMessage('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó');
    }
  };

  const loadConfiguration = async (config) => {
    try {
      setConfigLoading(true);
      console.log('üîÑ Loading configuration:', config.name);

      const shouldRestoreFilters = config.filters && onFiltersUpdate;

      if (shouldRestoreFilters) {
        console.log('üìÖ Restoring filters from configuration...');
        showSuccessMessage('üìÖ –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏...');
        onFiltersUpdate(config.filters);

        setTimeout(() => {
          applyConfigurationToPivot(config);
        }, 800);
      } else {
        applyConfigurationToPivot(config);
      }

      setShowLoadModal(false);

    } catch (error) {
      console.error('‚ùå Error loading configuration:', error);
      showSuccessMessage('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó');
    } finally {
      setTimeout(() => setConfigLoading(false), 1000);
    }
  };

  const saveConfiguration = async () => {
    try {
      setLoading(true);

      const configToSave = {
        name: saveForm.name,
        description: saveForm.description,
        configuration: {
          aggregatorName: pivotState.aggregatorName,
          vals: pivotState.vals,
          rows: pivotState.rows,
          cols: pivotState.cols,
          rendererName: pivotState.rendererName,
          unusedOrientationCutoff: pivotState.unusedOrientationCutoff
        },
        filters: filters,
        isDefault: saveForm.isDefault
      };

      const response = await apiClient.post('/pivot-configs', configToSave);

      if (response.success) {
        await loadSavedConfigurations();
        setShowSaveModal(false);
        setSaveForm({ name: '', description: '', isDefault: false });

        const filterInfo = Object.entries(filters)
          .filter(([key, value]) => value && value !== 'all')
          .map(([key, value]) => `${key}: ${value}`)
          .join(', ');

        const message = `üíæ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é "${saveForm.name}" –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n\n` +
          `–†—è–¥–∫–∏: ${pivotState.rows?.join(', ') || '–Ω–µ–º–∞—î'}\n` +
          `–ö–æ–ª–æ–Ω–∫–∏: ${pivotState.cols?.join(', ') || '–Ω–µ–º–∞—î'}\n` +
          `–ó–Ω–∞—á–µ–Ω–Ω—è: ${pivotState.vals?.join(', ') || '–Ω–µ–º–∞—î'}` +
          (filterInfo ? `\n–§—ñ–ª—å—Ç—Ä–∏: ${filterInfo}` : '');

        showSuccessMessage(message);
      }
    } catch (error) {
      console.error('Error saving configuration:', error);
      if (error.response?.status === 409) {
        showSuccessMessage('‚ùå –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î');
      } else {
        showSuccessMessage('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó');
      }
    } finally {
      setLoading(false);
    }
  };

  const deleteConfiguration = async (configId, configName) => {
    try {
      if (!window.confirm(`–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é "${configName}"?`)) {
        return;
      }

      const response = await apiClient.delete(`/pivot-configs/${configId}`);

      if (response.success) {
        await loadSavedConfigurations();
        showSuccessMessage(`‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é "${configName}" –≤–∏–¥–∞–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!`);
      }
    } catch (error) {
      console.error('Error deleting configuration:', error);
      showSuccessMessage('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó');
    }
  };

  const setAsDefault = async (configId, configName) => {
    try {
      const response = await apiClient.put(`/pivot-configs/${configId}`, {
        isDefault: true
      });

      if (response.success) {
        await loadSavedConfigurations();
        showSuccessMessage(`‚≠ê "${configName}" –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —è–∫ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º!`);
      }
    } catch (error) {
      console.error('Error setting default configuration:', error);
      showSuccessMessage('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º');
    }
  };

  const applyPreset = (presetKey) => {
    const preset = presetConfigs[presetKey];
    if (preset) {
      console.log('üéØ Applying preset:', preset.name);

      const newState = {
        ...pivotState,
        ...preset.config,
        data: translatedData,
        _forceUpdate: Date.now()
      };

      setPivotState(newState);
      setIsInitialized(true);

      setTimeout(() => forceRefreshPivot(), 100);
      showSuccessMessage(`üéØ –ü—Ä–µ—Å–µ—Ç "${preset.name}" –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ!`);
    }
  };

  const getAvailableConfigs = () => {
    return Object.entries(presetConfigs).filter(([key, config]) => {
      if (config.requiresFuture && !hasFutureDeliveries) {
        return false;
      }
      return true;
    });
  };

  const exportToCSV = () => {
    try {
      const csvData = data.map(row => {
        const csvRow = {};
        Object.keys(row).forEach(key => {
          csvRow[key] = typeof row[key] === 'object' && row[key] !== null
            ? JSON.stringify(row[key])
            : row[key];
        });
        return csvRow;
      });

      const csvContent = "data:text/csv;charset=utf-8," +
        Object.keys(csvData[0]).join(",") + "\n" +
        csvData.map(row => Object.values(row).join(",")).join("\n");

      const encodedUri = encodeURI(csvContent);
      const link = document.createElement("a");
      link.setAttribute("href", encodedUri);
      link.setAttribute("download", `pivot_data_${new Date().toISOString().split('T')[0]}.csv`);
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);

      showSuccessMessage('üìä –î–∞–Ω—ñ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≤ CSV');
    } catch (error) {
      console.error('Error exporting CSV:', error);
      showSuccessMessage('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ');
    }
  };

  // ===== EFFECTS =====
  // Initialize data
  useEffect(() => {
    if (translatedData.length > 0 && !isInitialized) {
      setPivotState(prev => ({
        ...prev,
        data: translatedData,
        cols: hasFutureDeliveries ? ['–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏'] : ['–î–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è']
      }));
      setIsInitialized(true);
    } else if (translatedData.length > 0 && isInitialized) {
      setPivotState(prev => ({
        ...prev,
        data: translatedData
      }));
    }
  }, [translatedData, hasFutureDeliveries, isInitialized]);

  // Load saved configurations on mount
  useEffect(() => {
    loadSavedConfigurations();
  }, []);

  // ===== STATUS COMPONENT =====
  const StatusIndicator = () => {
    if (configLoading) {
      return (
        <div className="d-flex align-items-center text-primary mb-2">
          <Spinner animation="border" size="sm" className="me-2" />
          –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é...
        </div>
      );
    }

    if (successMessage) {
      return (
        <Alert variant="success" className="mb-2 py-2" dismissible onClose={() => setSuccessMessage('')}>
          {successMessage}
        </Alert>
      );
    }

    return null;
  };

  // ===== RENDER =====
  return (
    <Card>
      <Card.Header className="d-flex justify-content-between align-items-center">
        <div>
          <h5 className="mb-0">Pivot —Ç–∞–±–ª–∏—Ü—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏</h5>
        </div>
        <div className="d-flex gap-2 flex-wrap">
          <Button
            variant="outline-warning"
            size="sm"
            onClick={clearColumns}
            title="–û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ–ª–æ–Ω–∫–∏"
          >
            –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ–ª–æ–Ω–∫–∏
          </Button>
          <Button
            variant="outline-info"
            size="sm"
            onClick={clearRows}
            title="–û—á–∏—Å—Ç–∏—Ç–∏ —Ä—è–¥–∫–∏"
          >
            –û—á–∏—Å—Ç–∏—Ç–∏ —Ä—è–¥–∫–∏
          </Button>
          <Button
            variant="outline-secondary"
            size="sm"
            onClick={resetToDefault}
            title="–°–∫–∏–Ω—É—Ç–∏ –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"
          >
            <RotateCcw size={16} className="me-1" />
            –°–∫–∏–Ω—É—Ç–∏
          </Button>
          <Button
            variant="outline-success"
            size="sm"
            onClick={() => onFiltersUpdate && onFiltersUpdate({ ...filters, _forceRefresh: Date.now() })}
            title="–û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ"
            disabled={!onFiltersUpdate}
          >
            <TrendingUp size={16} className="me-1" />
            –û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ
          </Button>
          <Button
            variant="primary"
            size="sm"
            onClick={() => setShowSaveModal(true)}
            title="–ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é"
          >
            <Save size={16} className="me-1" />
            –ó–±–µ—Ä–µ–≥—Ç–∏
          </Button>
          <Button
            variant="outline-primary"
            size="sm"
            onClick={() => setShowLoadModal(true)}
            title="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é"
          >
            <Settings size={16} className="me-1" />
            –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏
          </Button>
          <Button
            variant="outline-dark"
            size="sm"
            onClick={exportToCSV}
            title="–ï–∫—Å–ø–æ—Ä—Ç –≤ CSV"
            disabled={!hasData}
          >
            <Download size={16} />
          </Button>
        </div>
      </Card.Header>

      <Card.Body className="p-0">
        <StatusIndicator />

        {/* Data Info */}
        <div className="p-2 bg-info bg-opacity-10 border-bottom">
          <small className="text-muted">
            <strong>–î–∞–Ω—ñ:</strong> {data.length} –∑–∞–ø–∏—Å—ñ–≤ |
            <strong> –ü–µ—Ä—ñ–æ–¥:</strong> {
              filters.startDate && filters.endDate
                ? `${new Date(filters.startDate).toLocaleDateString('uk-UA')} - ${new Date(filters.endDate).toLocaleDateString('uk-UA')}`
                : '–í—Å—ñ –¥–∞—Ç–∏'
            }
            {filters.status !== 'all' && (
              <span> | <strong>–°—Ç–∞—Ç—É—Å:</strong> {filters.status}</span>
            )}
            {filters.deliveryType !== 'all' && (
              <span> | <strong>–î–æ—Å—Ç–∞–≤–∫–∞:</strong> {filters.deliveryType}</span>
            )}
            {hasFutureDeliveries && (
              <span> | <strong style={{ color: '#28a745' }}>–í–∫–ª—é—á–∞—î –º–∞–π–±—É—Ç–Ω—ñ –¥–æ—Å—Ç–∞–≤–∫–∏</strong></span>
            )}
          </small>
        </div>

        {/* Saved Configurations Info */}
        {savedConfigs.length > 0 && (
          <div className="p-2 bg-success bg-opacity-10 border-bottom">
            <small className="text-success">
              <strong>üíæ –ó–±–µ—Ä–µ–∂–µ–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó ({savedConfigs.length}):</strong> {savedConfigs.map(c => c.name).join(', ')}
              {savedConfigs.some(c => c.isDefault) && (
                <span className="ms-2">
                  <Star size={12} className="text-warning" />
                  –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: {savedConfigs.find(c => c.isDefault)?.name}
                </span>
              )}
            </small>
          </div>
        )}

        {/* Preset Configurations */}
        <div className="p-3 bg-light border-bottom">
          <h6 className="mb-2">–ì–æ—Ç–æ–≤—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—ñ–≤:</h6>
          <div className="row g-2">
            {getAvailableConfigs().map(([key, preset]) => (
              <div key={key} className="col-md-6 col-lg-4">
                <Button
                  variant="outline-primary"
                  size="sm"
                  onClick={() => applyPreset(key)}
                  className="w-100 text-start d-flex align-items-center gap-2"
                  title={preset.description}
                >
                  {preset.icon}
                  <div>
                    <div className="fw-bold">{preset.name}</div>
                    <small className="text-muted">{preset.description}</small>
                  </div>
                </Button>
              </div>
            ))}
          </div>

          {hasFutureDeliveries && (
            <Alert variant="success" className="mt-3 mb-0">
              <TrendingUp size={16} className="me-1" />
              <strong>–†–µ–∂–∏–º –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏–π!</strong> –í–∏ –º–æ–∂–µ—Ç–µ –∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –º–∞–π–±—É—Ç–Ω—ñ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–∞ –ø–ª–∞–Ω—É–≤–∞—Ç–∏ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ.
            </Alert>
          )}
        </div>

        {/* Pivot Table */}
        <div className="pivot-container" style={{ minHeight: '500px' }}>
          {hasData ? (
            <PivotTableUI
              data={translatedData}
              onChange={handlePivotChange}
              renderers={Object.assign({}, TableRenderers, PlotlyRenderers)}
              {...pivotState}
              unusedOrientationCutoff={85}
              hiddenAttributes={[]}
              hiddenFromAggregators={[]}
              hiddenFromDragDrop={[]}
              key={`pivot-${isInitialized}-${translatedData.length}`}
            />
          ) : (
            <Alert variant="warning" className="m-3">
              <Alert.Heading>–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è</Alert.Heading>
              <p>–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ—ñ–ª—å—Ç—Ä–∏ –∞–±–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å –≤ —Å–∏—Å—Ç–µ–º—ñ.</p>
            </Alert>
          )}
        </div>
      </Card.Body>

      <Card.Footer className="bg-light">
        <Row>
          <Col>
            <small className="text-muted">
              <strong>–ü–æ—Ä–∞–¥–∞:</strong> –ü–µ—Ä–µ—Ç—è–≥—É–π—Ç–µ –ø–æ–ª—è –º—ñ–∂ –∑–æ–Ω–∞–º–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö –∑–≤—ñ—Ç—ñ–≤.
              {hasFutureDeliveries ? ' –ó–µ–ª–µ–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—ñ –¥–ª—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –º–∞–π–±—É—Ç–Ω—ñ—Ö –¥–æ—Å—Ç–∞–≤–æ–∫.' : ''}
              {savedConfigs.length > 0 && ' –ó–±–µ—Ä–µ–∂–µ–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –¥–æ—Å—Ç—É–ø–Ω—ñ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å.'}
            </small>
          </Col>
        </Row>
      </Card.Footer>

      {/* Save Modal */}
      <Modal show={showSaveModal} onHide={() => setShowSaveModal(false)} centered>
        <Modal.Header closeButton>
          <Modal.Title>
            <Save className="me-2" size={20} />
            –ó–±–µ—Ä–µ–≥—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
          </Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <Form.Group className="mb-3">
              <Form.Label>–ù–∞–∑–≤–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó *</Form.Label>
              <Form.Control
                type="text"
                value={saveForm.name}
                onChange={(e) => setSaveForm(prev => ({ ...prev, name: e.target.value }))}
                placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"
                required
              />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>–û–ø–∏—Å (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)</Form.Label>
              <Form.Control
                as="textarea"
                rows={2}
                value={saveForm.description}
                onChange={(e) => setSaveForm(prev => ({ ...prev, description: e.target.value }))}
                placeholder="–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"
              />
            </Form.Group>
            <Form.Check
              type="checkbox"
              id="default-config"
              label="–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —è–∫ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º"
              checked={saveForm.isDefault}
              onChange={(e) => setSaveForm(prev => ({ ...prev, isDefault: e.target.checked }))}
            />
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="outline-secondary" onClick={() => setShowSaveModal(false)}>
            –°–∫–∞—Å—É–≤–∞—Ç–∏
          </Button>
          <Button
            variant="primary"
            onClick={saveConfiguration}
            disabled={!saveForm.name.trim() || loading}
          >
            {loading ? '–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è...' : '–ó–±–µ—Ä–µ–≥—Ç–∏'}
          </Button>
        </Modal.Footer>
      </Modal>

      {/* Load Modal */}
      <Modal show={showLoadModal} onHide={() => setShowLoadModal(false)} size="lg" centered>
        <Modal.Header closeButton>
          <Modal.Title>
            <Settings className="me-2" size={20} />
            –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
          </Modal.Title>
        </Modal.Header>
        <Modal.Body>
          {savedConfigs.length === 0 ? (
            <Alert variant="info">
              <Alert.Heading>–ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π</Alert.Heading>
              <p>–°—Ç–≤–æ—Ä—ñ—Ç—å —Å–≤–æ—é –ø–µ—Ä—à—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é, –Ω–∞–ª–∞—à—Ç—É–≤–∞–≤—à–∏ pivot table —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.</p>
            </Alert>
          ) : (
            <ListGroup>
              {savedConfigs.map(config => (
                <ListGroup.Item key={config.id} className="d-flex justify-content-between align-items-start">
                  <div className="flex-grow-1">
                    <div className="d-flex align-items-center gap-2">
                      <h6 className="mb-1">
                        {config.name}
                        {config.isDefault && (
                          <Badge bg="warning" text="dark" className="ms-2">
                            <Star size={12} /> –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
                          </Badge>
                        )}
                      </h6>
                    </div>
                    {config.description && (
                      <p className="mb-1 text-muted small">{config.description}</p>
                    )}
                    <small className="text-muted">
                      –°—Ç–≤–æ—Ä–µ–Ω–æ: {new Date(config.createdAt).toLocaleString('uk-UA')}
                      {config.updatedAt !== config.createdAt && (
                        <span> | –û–Ω–æ–≤–ª–µ–Ω–æ: {new Date(config.updatedAt).toLocaleString('uk-UA')}</span>
                      )}
                    </small>
                  </div>
                  <div className="d-flex gap-1">
                    <Button
                      variant="outline-primary"
                      size="sm"
                      onClick={() => loadConfiguration(config)}
                      title="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é"
                      disabled={configLoading}
                    >
                      {configLoading ? <Spinner animation="border" size="sm" /> : '–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏'}
                    </Button>
                    {!config.isDefault && (
                      <Button
                        variant="outline-warning"
                        size="sm"
                        onClick={() => setAsDefault(config.id, config.name)}
                        title="–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —è–∫ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º"
                      >
                        <Star size={14} />
                      </Button>
                    )}
                    <Button
                      variant="outline-danger"
                      size="sm"
                      onClick={() => deleteConfiguration(config.id, config.name)}
                      title="–í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é"
                    >
                      <Trash2 size={14} />
                    </Button>
                  </div>
                </ListGroup.Item>
              ))}
            </ListGroup>
          )}
        </Modal.Body>
        <Modal.Footer>
          <Button variant="outline-secondary" onClick={() => setShowLoadModal(false)}>
            –ó–∞–∫—Ä–∏—Ç–∏
          </Button>
        </Modal.Footer>
      </Modal>
    </Card>
  );
};

export default PivotTableContainer;